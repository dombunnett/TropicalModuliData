> my $total=0; for my $b (0,3,7,31) { my @dimensions = map { load($_)->CONE_DIM } glob("g3b$b/moduli/*.cone"); my $s=scalar(@dimensions); $total+=$s; print $b, ":", histogram(\@dimensions), " $s\n"; }; print "TOTAL: $total\n";
one_bridge    0:{(4 10) (5 120) (6 95)} 225
mickey_mouse  3:{(4 59) (5 216) (6 175)} 450
honeycomb     7:{(3 18) (4 142) (5 269) (6 144)} 573
two_bridge   31:{(5 15) (6 15)} 30
TOTAL: 1278

ids of cones in bucket #7 with CONE_DIM = 3
map { my $m=load($_); print " ", $m->get_attachment("ID") if ($m->CONE_DIM==3) } glob("g3b7/moduli/*.cone");
1094 1113 1190 1262 1277 138 139 208 210 263 458 510 577 657 718 841 904 91

# Theorem 5.1, bucket #7: honeycomb inequalities
# SUCCESS: weak ineqs verified: 14-06-23
declare $unverified_cones=0;
print STDERR "check_honeycomb: ";
foreach my $m (map { load($_) } glob($wd_path."/".$prefix."b7/moduli/*.cone")) {
  $unverified_cones += check_honeycomb($m);
}
print STDERR "\nunverified cones=", $unverified_cones, "\n";

# Theorem 5.1, bucket #3: mickey_mouse inequalities
# VERIFIED: weak & strict ineqs 14-07-08
declare $unverified_cones=0;
foreach my $m (map { load($_) } glob($wd_path."/".$prefix."b3/moduli/*.cone")) {
    $unverified_cones += check_mickey_mouse($m);
}
print STDERR "\nunverified cones=", $unverified_cones, "\n";

# Theorem 5.1, bucket #0: one_bridge inequalities satisfied
# SUCCESS: weak ineqs verified 14-06-27
declare $unverified_cones=0;
print STDERR "check_one_bridge: ";
foreach my $m (map { load($_) } glob($wd_path."/".$prefix."b0/moduli/*.cone")) {
  $unverified_cones += check_one_bridge($m);
}
print STDERR "\nunverified cones=", $unverified_cones, "\n";

# Theorem 5.1, bucket #31: two_bridge inequalities satisfied
# VERIFIED: weak & strict ineqs 14-07-08
declare $unverified_cones=0;
declare $i=0;
foreach my $m (map { load($_) } glob($wd_path."/".$prefix."b31/moduli/*.cone")) {
  $unverified_cones += check_two_bridge($m);
  ++$i;
}
print STDERR "\nunverified cones=", $unverified_cones, " [out of $i]\n";



# The moduli cones in the one- #0 and two-bridge #31 buckets are simplex cones
$b=0; foreach my $id (@{load_data($prefix."b$b/g3b$b-ids.dat")}) { my $m=load("g3b$b/moduli/g3b$b-$id-moduli.cone"); print " $id" unless $m->SIMPLICIAL_CONE; }
$b=31; foreach my $id (@{load_data($prefix."b$b/g3b$b-ids.dat")}) { my $m=load("g3b$b/moduli/g3b$b-$id-moduli.cone"); print " $id" unless $m->SIMPLICIAL_CONE; }

# non-simplex cones in the mickey mouse ...
$b=3; foreach my $id (@{load_data($prefix."b$b/g3b$b-ids.dat")}) { my $m=load("g3b$b/moduli/g3b$b-$id-moduli.cone"); print " $id" unless $m->SIMPLICIAL_CONE; }


# ... and honeycomb buckets
$b=7; foreach my $id (@{load_data("g3b$b/g3b$b-ids.dat")}) { my $m=load("g3b$b/moduli/g3b$b-$id-moduli.cone"); print " $id" unless $m->SIMPLICIAL_CONE; }
 86 114 145 148 170 171 177 210 212 217 225 231 234 245 247 266 267 268 274 305 317 321 334 364 365 366 367 368 369 370 380 382 386 393 400 410 415 420 432 438 440 442 443 445 446 447 448 462 481 492 495 505 507 514 515 516 537 539 540 549 555 556 558 559 566 569 578 583 586 594 605 610 617 618 620 621 624 626 631 632 637 639 640 641 642 648 650 655 669 670 675 679 685 686 687 697 698 709 711 738 759 775 777 780 781 786 788 789 793 794 795 797 798 810 811 813 819 822 823 824 828 830 831 832 833 840 851 856 862 863 864 870 871 872 875 876 887 888 890 895 896 897 901 907 908 916 922 923 931 937 940 944 946 947 948 949 953 964 970 975 1012 1020 1028 1029 1030 1033 1034 1035 1036 1037 1038 1041 1050 1056 1057 1061 1062 1064 1065 1066 1068 1072 1075 1095 1096 1097 1100 1106 1108 1110 1111 1112 1120 1121 1122 1123 1125 1126 1127 1129 1134 1136 1143 1144 1148 1150 1151 1152 1161 1164 1165 1167 1182 1195 1197 1206 1207 1210 1214 1216 1219 1225 1226 1231 1232 1236 1240 1242 1251 1253 1254 1261 1264 1265 1269

# probabilities
print_probability_table();
honeycomb: 1/15=0.0666666666666667
mickey_mouse: 2/15=0.133333333333333
one_bridge: 449/2520=0.178174603174603
two_bridge: 1/3=0.333333333333333
TOTAL: 3485585875698161/6267042531288000=0.556177153465369
